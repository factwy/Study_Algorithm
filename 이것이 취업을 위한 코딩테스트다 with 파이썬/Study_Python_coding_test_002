- 그리디 알고리즘 : 현재 상황에서 지금 당장 좋은 것만 고르는 방법
# 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력 요구
# 정당성 분석 중요 !!
# 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을때가 많다
# 코딩 테스트에서의 대부분의 그리디 문제는 탐욕법으로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제됨

# 거스름 돈 : 문제 해결 아이디어
  - 가장 큰 화폐 단위부터 돈을 거슬러 주기
  - 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없음
  - 시간 복잡도 : O(N) # 돈의 양에는 영향을 받지 않고 거스름돈 종류의 갯수에 영향을 받는다

# 1이 될 때까지 : 문제 해결 아이디어
  - 주어진 N에 대하여 최대한 많이 나누기를 수행
  - N의 값을 줄일 때 2 이상의 수로 나누는 작업이 1을 빼는 작업보다 수를 훨씬 많이 줄일 수 있다

# 곱하기 혹은 더하기 : 문제 해결 아이디어
  - 두 수에 대하여 연산을 수행할 때, 두 수 중에서 하나라도 1 이하인 경우에는 더하며, 두 수가 모두 2 이상인 경우에는 곱해야 한다.

# 모험가 길드 : 문제 해결 아이디어
  - 오름차순 정렬 이후에 공포도가 가장 낮은 모험가부터 확인
  - 앞에서부터 공포도를 하나씩 확인하며 ‘현재 그룹에 포합된 모험가의 수’가 ‘현재 확인하고 있는 공포도’ 보다 크거나 같다면 이를 그룹으로 설정
  - 공포도가 오름차순으로 정렬되어 있으므로 항상 최소한의 모험가의 수만 포함하여 그룹을 결성하게 됨

- 구현 : 머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정
# 풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제
# 알고리즘은 간단하지만 코드가 지나칠 만큼 길어지는 문제
# 실수 연산을 다루고, 특정 소수점 자리까지 출력해야 하는 문제
# 문자열을 특정한 기준에 따라서 끊어 처리해야 하는 문제
# 적절한 라이브러리를 찾아서 사용해야 하는 문제

# 상하좌우 : 문제 해결 아이디어
  - 시뮬레이션 유형으로 분류되며 구현이 중요한 대표적인 문제 유형

# 시각 : 문제 해결 아이디어
  - 가능한 모든 시각의 경우를 하나씩 모두 세서 풀 수 있는 문제
  - 이러한 유형은 완전 탐색 문제 유형이라고 불림
    # 완전 탐색 : 가능한 경우의 수를 모두 검사해보는 탐색 방법

# 왕실의 나이트 : 문제 해결 아이디어
- 나이트의 8가지 경로를 하나씩 확인하며 각 위치로 이동이 가능한지 확인
- 리스트를 이용하여 8가지 방향에 대한 방향 벡터를 정의

# 문자열 재정렬
  - 문자열이 입력되었을 때 문자를 하나씩 확인
    # 숫자인 경우 따로 합계를 계산
    # 알파벳은 별도의 리스트에 저장
  - 리스트에 저장된 알파벳을 정렬해 출력하고, 합계를 뒤에 붙여 출력
